<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://code.alibabatech.com/schema/dubbo
							http://code.alibabatech.com/schema/dubbo/dubbo.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
     <!--配置哪些资源可以匿名可以访问(不登录就可以访问)-->
   <!-- <security:http security="none" pattern="/pages/a.html"></security:http>
    <security:http security="none" pattern="/pages/b.html"></security:http>-->
    <!--pages下面的所页面都可以直接匿名访问-->
 <!--   <security:http security="none" pattern="/pages/**"></security:http>-->
    <security:http security="none" pattern="/login.html"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/img/**"></security:http>
    <security:http security="none" pattern="/plugins/**"></security:http>

  <!--  auto-config：是否自动配置
    设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
    设置为false时需要显示提供登录表单配置，否则会报错
    use-expressions：用于指定intercept-url中的access属性是否使用表达式  是否使用spring security提供的表达式来描述权限-->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问-->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>
        <!--进入了spring security中后再次进行过滤，intercept-url是过滤器的配置拦截规则
        pattern中的值/**是拦截所有请求 /*拦截一个/的   例如/a  /a/b/index.html
        用pattern描述拦截后
        用access来规定干啥  access:指定所需的访问角色或者访问权限  当use-expressions为false时，access就不需要表达式，直接为access="RoOLE_ADMIN"
        isAuthenticated()：已经经过认证（不是匿名用户）
        -->

        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/**"  access="isAuthenticated()" />

        <!--如果我们要使用自己的登录页面，不使用框架自带的登录页面，必须配置登录表单
        login-page:指定登录页面的url
        username-parameter：指定你登录页面中的用户名输入框所取的名字
        password-parameter:指定你登录页面中的密码输入框所取的名字
        login-processing-url:这是登录请求，这样就不需要自己去再写controller  框架自动做认证处理
        default-target-url:登录成功后默认跳转页面
        authentication-failure-url:登录不成功后重新跳转到登录页面
        -->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/pages/main.html"
                             authentication-failure-url="/login.html"
        />

       <!-- csrf：对应CsrfFilter过滤器
        disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则
        登录操作会被禁用（403）-->
        <security:csrf disabled="true"/>


        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径
          logout-success-url：退出登录后的跳转页面
          invalidate-session:销毁session
      -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html"  invalidate-session="true"/>
    </security:http>
    <!--配置认证管理器-->
    <security:authentication-manager>
       <!-- 配置提供者-->
      <security:authentication-provider user-service-ref="springSecurityUserService">
        <!--<security:user-service>
            &lt;!&ndash;  配置一个具体的用户,后期需要从数据库里面查询用户  password中加入{noop}表示是明文密码 &ndash;&gt;
            <security:user name="admin" password="{noop}123" authorities="ROLE_ADMIN"></security:user>
        </security:user-service>-->
         <!-- 指定对密码进行加密的对象-->
          <security:password-encoder ref="passwordEncoder"></security:password-encoder>
      </security:authentication-provider>
    </security:authentication-manager>

    <!--配置加密信息-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
    <!--在spring-security.xml文件中开启权限注解方式权限控制支持-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>